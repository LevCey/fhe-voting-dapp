/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "candidateVotes"
      | "candidates"
      | "endVoting"
      | "getCandidateName"
      | "getCandidatesCount"
      | "getEncryptedVotes"
      | "getHasVoted"
      | "hasVoted"
      | "owner"
      | "startVoting"
      | "vote"
      | "votingOpen"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateAdded"
      | "Voted"
      | "VotingEnded"
      | "VotingStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCandidateName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidatesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingOpen",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidatesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHasVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votingOpen", data: BytesLike): Result;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [candidateId: BigNumberish, name: string];
  export type OutputTuple = [candidateId: bigint, name: string];
  export interface OutputObject {
    candidateId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [voter: AddressLike, candidateId: BigNumberish];
  export type OutputTuple = [voter: string, candidateId: bigint];
  export interface OutputObject {
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEVoting extends BaseContract {
  connect(runner?: ContractRunner | null): FHEVoting;
  waitForDeployment(): Promise<this>;

  interface: FHEVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<[_name: string], [void], "nonpayable">;

  candidateVotes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  candidates: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  endVoting: TypedContractMethod<[], [void], "nonpayable">;

  getCandidateName: TypedContractMethod<
    [_candidateId: BigNumberish],
    [string],
    "view"
  >;

  getCandidatesCount: TypedContractMethod<[], [bigint], "view">;

  getEncryptedVotes: TypedContractMethod<
    [_candidateId: BigNumberish],
    [string],
    "view"
  >;

  getHasVoted: TypedContractMethod<[_user: AddressLike], [boolean], "view">;

  hasVoted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  startVoting: TypedContractMethod<[], [void], "nonpayable">;

  vote: TypedContractMethod<
    [
      _candidateId: BigNumberish,
      _encryptedVote: BytesLike,
      _inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  votingOpen: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "candidateVotes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidateName"
  ): TypedContractMethod<[_candidateId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCandidatesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEncryptedVotes"
  ): TypedContractMethod<[_candidateId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getHasVoted"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [
      _candidateId: BigNumberish,
      _encryptedVote: BytesLike,
      _inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingOpen"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VotingEnded"
  ): TypedContractEvent<
    VotingEndedEvent.InputTuple,
    VotingEndedEvent.OutputTuple,
    VotingEndedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStarted"
  ): TypedContractEvent<
    VotingStartedEvent.InputTuple,
    VotingStartedEvent.OutputTuple,
    VotingStartedEvent.OutputObject
  >;

  filters: {
    "CandidateAdded(uint256,string)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "Voted(address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VotingEnded()": TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
    VotingEnded: TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;

    "VotingStarted()": TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
    VotingStarted: TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
  };
}
